mock server:
node-mock-server
-interfaccia swagger
-posso anche simulare l'errore
-dipendenze di sviluppo: --dev
Ma smettila

vuex è un service. che4 ti memorizza le variabili a livello applicativo. Globale
permette a tutti (event bus) di collegarsi allo stesso state. per far interagire tutti sullo stesso stato. non è persistente e quindi serve una base dati che conservi lo stato.

	action: metodo contenuto in vuex, rappresenta una chiamata per cambiare uno stato. unico 		componente asincrono e chiama il BE.

	mutation: viene chiamata quando va a buon fine la actioon. cambia lo stato.

	Getters: servono a prendere il valore e modificarlo. e farci piccola logica
	
	state: rappresenta tutta l'applicazione. se divido in moduli divido l'applicazione
--------------------------------------------------------------------------------------------------

git:
-git scm
-VIM: editor 
-git tower per mac

CVCS: un repository centrale e un clioent. non si aveva un repository in locale e devi sempre essere online. (SVM)
DVCS: sitsema distribuito. (GIT) 

git init "inizializzo una repository"
git add -A // . ==>aggiungo tutto
git commit 

git touch: cambia data di creazione del file oppure crea un file.

area di staging: area precedente alla commit.
commito: 1fase: aggiungi file in area di staging
	2fase:

git clone: clona un repository https://my-url
git rm --cached <nome file> toglie il file dalla staging area

branch: diversi rami per sviluppare

git checkout : mi distinguo tra i diversi branch

HEAD~3: torno inietro alla 4rta commit

detached head : è una zona sconosciuta, di nessuno

git checkout . : resetta tutti i file allì'ultima versione conosciuta
git clean -fd: pulisce tutte le cartelle
git reset --hard HEAD: metodo violento per resettare tuttoù
	git reset --hard remote/branch 
	git reset --hard origin/master


git pull: è un fetch che prende tutto quello che c'è in remoto e poi fa merge con il branch in cui sono

git checkout branch
git pull
git merge other-branch

git merge squash: salvavita, crea una sola commit della merge e la mette nella parte più alta del repository del brench.

git config --global core.editor "vim"


bundler: fa cose del task runner + crea il grafo delle differenze+ file di config
task runner:riduce tutti i file in uno per tipo

Middleware: manda l'interfaccia corretta.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------


WEB COMPONENT: serve a utilizzare più componenti sviluppati in tecnologie diverse nella stessa pagina|| è uno standard

VIRTUAL DOM E SHADOW DOM SONO DIVERSI!!
	VIRTUAL DOM : (react) è una astrazione del dom in javascript. è una struttura adf albero che rappresenta lòa struttura deldom 


WEB COMPONENT: costum element, nuovi elementi in HTML5, standard di w3c, ed estendono l'HTMl. ma se non è standard come faccio a validarlo e a metterlo nei browser?
	-W3C ha imposto degli standard.
	-non è come i component in angular. 
	-attributi: (--mode=)
		    --computed 
		    --istanza
	-una volta registrato il web component non si può togliere e se ne aggiungo uno la pagina si rompe. 
	-un BOM e più DOM
	     |
	     |
	     V
	tutto ciò che riguarda il browser(NAVIGATOR__DOM__HISTORY)
	-VUE: in main.ts -->$maunt: fa il boostrap dell'app
	-possiamo incapsulare funzionalità nell'HTML
	- <template>: utilizzo html
		|-->l'immagine posso caricarla a runTime. perchè così posso riutilizzare il componente
		|-->lavora direttamente nel DOMù
		|--> non viene reindirizzato finchè nessuno lo utilizza
	
	- shadow dom: incapsulamento delle API 
		|-->un DOM più SHADOW DOM 
		|-->SHADOW ROOT: meta tag per farmi individuare dove inizia una SHADOW dom.
			|-->ci possono essere più livelli
		|-->markup incapsulation  
		|--> shadow CSS: è sempre scoped 
		|--> event: Capture phase	In questa fase l’evento si propaga dalla radice del DOM verso l’elemento destinatario effettivo; facendo riferimento al nostro 							esempio, l’evento viaggia dal <body> della pagina verso il <div> mainDiv.
			    Target phase	In questa fase l’evento raggiunge l’elemento destinatario; nel nostro caso rappresenta il momento in cui l’evento raggiunge il 							primo paragrafo.
			    Bubble phase	Questa è la fase in cui l’evento risale l’albero del DOM partendo dall’elemento target fino a raggiungere la radice, passando 							quindi dagli stessi nodi attraversati nella fase di cattura.
		|->slot: scrivo un componente riutilizzabile, sono dei place holder, a runtime ci mettiamo dei markup


	- custom element: creare API e estendere il "vocabolario" gestite dal browser
		|-->customElement.define("tag", nome, {exstend: 'p'}); implementare i "life cicle loop" per far funzionare il tutto:
			|--> costruttore: deve eseere registrato e poi utilizzato, (dependecy injection)
			|-->connectedCallback//disconnectedCallback
			|-->attributeChangedComponent: cambiamenti del componente.

POLYMR COME SUPPORTO DEL WEB COMPONENT

sviluppata da google, gestione delle callback e gestione dei tempalet, 2 way data binding, sintassi complessa.
tutto ciò che sta dentro a "properties" può essere modificato.
computed binfing: funzione richiamta come observer di una property
	observer come STATIC property.




eventi standard o CUSTOM EVENT

LIT element: una classe come polymer che stendendola ci fa creare componenti diversi


monorepo e lerna: si ha tutto in un unico punto. per runnare tutti i componenti "distaccati" uso LERNA npm i -g lerna 
												           lerna init 
												           lerna boostrap 

 lerna boostrap --hoist -> porta su le dipendenze comuni

































